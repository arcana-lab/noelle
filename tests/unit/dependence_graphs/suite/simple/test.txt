pdg nodes
i32 %0
i8** %1
%3 = mul nsw i32 %0, 5
%4 = sdiv i32 %3, 2
%5 = add nsw i32 %4, 1
%.02 = phi i32 [ %0, %2 ], [ %10, %14 ]
%.01 = phi i32 [ %5, %2 ], [ %13, %14 ]
%.0 = phi i32 [ 0, %2 ], [ %15, %14 ]
%7 = icmp ult i32 %.0, 100
br i1 %7, label %8, label %16
%9 = add nsw i32 %.02, 1
%10 = sub nsw i32 %9, 3
%11 = mul nsw i32 %.01, 3
%12 = add nsw i32 %11, %10
%13 = sdiv i32 %12, 2
br label %14
%15 = add i32 %.0, 1
br label %6, !llvm.loop !4
br label %6
%.02.lcssa = phi i32 [ %.02, %6 ]
%.01.lcssa = phi i32 [ %.01, %6 ]
%17 = getelementptr inbounds [8 x i8], [8 x i8]* @.str, i64 0, i64 0
%18 = call i32 (i8*, ...) @printf(i8* noundef %17, i32 noundef %.02.lcssa, i32 noundef %.01.lcssa)
ret i32 0

pdg edges
i32 %0 ; %.02 = phi i32 [ %0, %2 ], [ %10, %14 ] ; data
i32 %0 ; %3 = mul nsw i32 %0, 5 ; data
%.0 = phi i32 [ 0, %2 ], [ %15, %14 ] ; %15 = add i32 %.0, 1 ; data
%.0 = phi i32 [ 0, %2 ], [ %15, %14 ] ; %7 = icmp ult i32 %.0, 100 ; data
%.01 = phi i32 [ %5, %2 ], [ %13, %14 ] ; %11 = mul nsw i32 %.01, 3 ; data
%.01 = phi i32 [ %5, %2 ], [ %13, %14 ] ; %.01.lcssa = phi i32 [ %.01, %6 ] ; data
%.02 = phi i32 [ %0, %2 ], [ %10, %14 ] ; %.02.lcssa = phi i32 [ %.02, %6 ] ; data
%.01.lcssa = phi i32 [ %.01, %6 ] ; %18 = call i32 (i8*, ...) @printf(i8* noundef %17, i32 noundef %.02.lcssa, i32 noundef %.01.lcssa) ; data
%.02.lcssa = phi i32 [ %.02, %6 ] ; %18 = call i32 (i8*, ...) @printf(i8* noundef %17, i32 noundef %.02.lcssa, i32 noundef %.01.lcssa) ; data
%17 = getelementptr inbounds [8 x i8], [8 x i8]* @.str, i64 0, i64 0 ; %18 = call i32 (i8*, ...) @printf(i8* noundef %17, i32 noundef %.02.lcssa, i32 noundef %.01.lcssa) ; data
%.02 = phi i32 [ %0, %2 ], [ %10, %14 ] ; %9 = add nsw i32 %.02, 1 ; data
%10 = sub nsw i32 %9, 3 ; %.02 = phi i32 [ %0, %2 ], [ %10, %14 ] ; data
%10 = sub nsw i32 %9, 3 ; %12 = add nsw i32 %11, %10 ; data
%11 = mul nsw i32 %.01, 3 ; %12 = add nsw i32 %11, %10 ; data
%12 = add nsw i32 %11, %10 ; %13 = sdiv i32 %12, 2 ; data
%13 = sdiv i32 %12, 2 ; %.01 = phi i32 [ %5, %2 ], [ %13, %14 ] ; data
%15 = add i32 %.0, 1 ; %.0 = phi i32 [ 0, %2 ], [ %15, %14 ] ; data
%3 = mul nsw i32 %0, 5 ; %4 = sdiv i32 %3, 2 ; data
%4 = sdiv i32 %3, 2 ; %5 = add nsw i32 %4, 1 ; data
%5 = add nsw i32 %4, 1 ; %.01 = phi i32 [ %5, %2 ], [ %13, %14 ] ; data
%7 = icmp ult i32 %.0, 100 ; br i1 %7, label %8, label %16 ; data
%9 = add nsw i32 %.02, 1 ; %10 = sub nsw i32 %9, 3 ; data
br i1 %7, label %8, label %16 ; %.0 = phi i32 [ 0, %2 ], [ %15, %14 ] ; control
br i1 %7, label %8, label %16 ; %.01 = phi i32 [ %5, %2 ], [ %13, %14 ] ; control
br i1 %7, label %8, label %16 ; %.02 = phi i32 [ %0, %2 ], [ %10, %14 ] ; control
br i1 %7, label %8, label %16 ; %10 = sub nsw i32 %9, 3 ; control
br i1 %7, label %8, label %16 ; %11 = mul nsw i32 %.01, 3 ; control
br i1 %7, label %8, label %16 ; %12 = add nsw i32 %11, %10 ; control
br i1 %7, label %8, label %16 ; %13 = sdiv i32 %12, 2 ; control
br i1 %7, label %8, label %16 ; %15 = add i32 %.0, 1 ; control
br i1 %7, label %8, label %16 ; %7 = icmp ult i32 %.0, 100 ; control
br i1 %7, label %8, label %16 ; %9 = add nsw i32 %.02, 1 ; control
br i1 %7, label %8, label %16 ; br i1 %7, label %8, label %16 ; control
br i1 %7, label %8, label %16 ; br label %14 ; control
br i1 %7, label %8, label %16 ; br label %6, !llvm.loop !4 ; control

ldg nodes
%.02 = phi i32 [ %0, %2 ], [ %10, %14 ]
%.01 = phi i32 [ %5, %2 ], [ %13, %14 ]
%.0 = phi i32 [ 0, %2 ], [ %15, %14 ]
%7 = icmp ult i32 %.0, 100
br i1 %7, label %8, label %16
%9 = add nsw i32 %.02, 1
%10 = sub nsw i32 %9, 3
%11 = mul nsw i32 %.01, 3
%12 = add nsw i32 %11, %10
%13 = sdiv i32 %12, 2
br label %14
%15 = add i32 %.0, 1
br label %6, !llvm.loop !4

pdg leaf values
i8** %1
br label %6
br label %6, !llvm.loop !4
br label %14
%18 = call i32 (i8*, ...) @printf(i8* noundef %17, i32 noundef %.02.lcssa, i32 noundef %.01.lcssa)
ret i32 0

pdg disjoint values
i8** %1
br label %6
%.0 = phi i32 [ 0, %2 ], [ %15, %14 ] | %.01 = phi i32 [ %5, %2 ], [ %13, %14 ] | %.02 = phi i32 [ %0, %2 ], [ %10, %14 ] |
  %.01.lcssa = phi i32 [ %.01, %6 ] | %.02.lcssa = phi i32 [ %.02, %6 ] |
  %10 = sub nsw i32 %9, 3 | %11 = mul nsw i32 %.01, 3 | %12 = add nsw i32 %11, %10 | %13 = sdiv i32 %12, 2 | %15 = add i32 %.0, 1 |
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* @.str, i64 0, i64 0 |
  %18 = call i32 (i8*, ...) @printf(i8* noundef %17, i32 noundef %.02.lcssa, i32 noundef %.01.lcssa) |
  %3 = mul nsw i32 %0, 5 | %4 = sdiv i32 %3, 2 | %5 = add nsw i32 %4, 1 | %7 = icmp ult i32 %.0, 100 | %9 = add nsw i32 %.02, 1 |
  br i1 %7, label %8, label %16 | br label %14 | br label %6, !llvm.loop !4  | i32 %0
ret i32 0

sccdag internal nodes (of outermost loop)
%15 = add i32 %.0, 1 | %7 = icmp ult i32 %.0, 100 | br i1 %7, label %8, label %16 | %.0 = phi i32 [ 0, %2 ], [ %15, %14 ]
br label %6, !llvm.loop !4 
br label %14
%.02 = phi i32 [ %0, %2 ], [ %10, %14 ] | %9 = add nsw i32 %.02, 1 | %10 = sub nsw i32 %9, 3
%.01 = phi i32 [ %5, %2 ], [ %13, %14 ] | %11 = mul nsw i32 %.01, 3 | %12 = add nsw i32 %11, %10 | %13 = sdiv i32 %12, 2

sccdag external nodes (of outermost loop)
%5 = add nsw i32 %4, 1
i32 %0
%.02.lcssa = phi i32 [ %.02, %6 ]
%.01.lcssa = phi i32 [ %.01, %6 ]
